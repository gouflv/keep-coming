# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Post {
  id: ID!
  title: String!
  content: String!
  createAt: DateTime!
  updateAt: DateTime!
  author: User!
  node: Node!
  nodePath: [Node!]!
  category: PostCategory!
  comments: [Comment!]!
  extendInfo: PostExtendInfo!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PostCategory {
  id: ID!
  name: String!
  sort: Float!
}

type Node {
  id: ID!
  name: String!
  icon: String
  sort: Float!
  createAt: DateTime!
  group: NodeGroup!
  postCategories: [PostCategory!]!
}

enum NodeGroup {
  DEFAULT
  GAME
}

type Comment {
  id: ID!
  postId: String!
  post: Post!
  authorId: String!
  author: User!
  content: String!
  createAt: DateTime!
  parent: Comment!
  children: [Comment!]!
}

type PostExtendInfo {
  viewCount: Float!
  likeCount: Float!
  saveCount: Float!
  commentCount: Float!
  lastCommentAt: DateTime
  rate: Float!
}

type PostNormal implements Post {
  id: ID!
  title: String!
  content: String!
  createAt: DateTime!
  updateAt: DateTime!
  author: User!
  node: Node!
  nodePath: [Node!]!
  category: PostCategory!
  comments: [Comment!]!
  extendInfo: PostExtendInfo!
}

type PostCollectionItem {
  item: PostNormal!
  order: Float!
}

type PostCollection implements Post {
  id: ID!
  title: String!
  content: String!
  createAt: DateTime!
  updateAt: DateTime!
  author: User!
  node: Node!
  nodePath: [Node!]!
  category: PostCategory!
  comments: [Comment!]!
  extendInfo: PostExtendInfo!
  collection: [PostCollectionItem!]!
}

type PostPaginatedResponse {
  items: [Post!]!
  total: Float!
}

type User {
  id: ID!
  name: String!
  email: String
  isEmailValidate: Boolean!
  avatar: String
  createAt: DateTime!

  """A list of user's posts"""
  posts(skip: Int = 0, take: Int = 50): [Post!]!
  comments: [Comment!]!

  """A list of user's liked posts"""
  likedPosts: [Post!]!

  """A list of user's saved posts"""
  savedPosts: [Post!]!
  isSilent: Boolean!
  silentUntil: DateTime!
}

type LoginResponse {
  access_token: String!
}

type Query {
  """Look up a user"""
  user(id: String!): User!

  """Look up a post"""
  post(id: String!): Post!

  """A list of posts"""
  posts(skip: Int = 0, take: Int = 50, order: PostOrderInput = {type: RATE, direction: DESC}, authorId: String, nodeId: String, categoryId: String): PostPaginatedResponse!

  """Look up a node"""
  node(id: String!): Node

  """A list of nodes"""
  nodes: [Node!]!
  login(password: String!, name: String!): LoginResponse!

  """Look up a user that has logged in"""
  currentUser: User!
}

input PostOrderInput {
  type: PostOrderField!
  direction: OrderDirection
}

enum PostOrderField {
  """Order by post's last active time"""
  RECENT

  """Order by post's rate"""
  RATE
}

"""A list orderBy direction argument"""
enum OrderDirection {
  ASC
  DESC
}

type Mutation {
  register(data: UserCreateInput!): User!
  createPost(data: CreatePostInput!): Post!
}

"""User register form data"""
input UserCreateInput {
  name: String!
  email: String!
  password: String!
}

input CreatePostInput {
  title: String!
  content: String!
  nodeId: String!
  categoryId: String!
}
